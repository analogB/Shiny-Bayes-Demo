install.packages("rjags")
w <- matrix(0,nrow=n,ncol=n)
x1 <- [1,1,1,1]
x2 <- [-1,-1,-1,-1]
n<-4
x1 <- c(1,1,1,1)
x2 <- c(-1,-1,-1,-1)
n<-4
w <- matrix(0,nrow=n,ncol=n)
View(w)
x<-matrix[0,nrow=m,ncol=n]
m<-2
n<-4
x<-matrix[0,nrow=m,ncol=n]
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j]
}}
m<-2
n<-4
x<-matrix[0,nrow=m,ncol=n]
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
x<-matrix[0,nrow=m,ncol=n]
x<-matrix(0,nrow=m,ncol=n)
m<-2
n<-4
x<-matrix(0,nrow=m,ncol=n)
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
View(w)
init <- c(1,1,1,-1)
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j])
}
}
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
state <- c(1,1,1,-1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
m<-2
n<-4
x<-matrix(0,nrow=m,ncol=n)
x[1,] <- c(1,1,1,1)
x[2,] <- c(-1,-1,-1,-1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
state <- c(1,1,1,1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
?permutations
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
permutations <- function(n){
if(n==1){
return(matrix(1))
} else {
sp <- permutations(n-1)
p <- nrow(sp)
A <- matrix(nrow=n*p,ncol=n)
for(i in 1:n){
A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
}
return(A)
}
}
statespace <- permutations(n)
View(statespace)
install.packages("permute")
require("permute.R")
require("permute")
?combn
y<-c(1,-1)
statespace <- combn(y,n)
statespace <- combn(n,y)
statespace <- combn(y,4)
y
combn(letters[1:4], 2)
letters[1:2]
y
combn(y,2)
?permn
?permute
statespace <- permute(y,4)
statespace <- permute(n,y)
statespace <- permute(n,control=y)
statespace <- permute(n,control.complete=TRUE)
y<-c(1,-1)
state <- c(-1,-1,1,-1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
w
}}
m<-3
n<-4
x<-matrix(0,nrow=m,ncol=n)
x[1,] <- c(1,1,1,1)
x[2,] <- c(1,1,1,-1)
x[3,] <- c(1,1,-1,1)
w <- matrix(0,nrow=n,ncol=n)
for (i in 1:n){
for (j in 1:n){
if (i==j) {w[i,j]<-0}
else w[i,j]<-sum(x[,i]*x[,j])
}}
y<-c(1,-1)
state <- c(-1,-1,1,-1)
E<-0
for (i in 1:n){
for (j in 1:n){
E <- E -.5 * w[i,j] * state[i]*state[j]
}}
w
E
install.packages('rsconnect')
source(rsconnect)
source('rsconnect)
source('rsconnect')
library('rsconnect')
install.packages('rsconnect')
install.packages("installr")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='brogers',
token='14E563FB22A3028062F79A84656C3887',
secret='<SECRET>')
rsconnect::setAccountInfo(name='brogers', token='14E563FB22A3028062F79A84656C3887', secret='kDNL8sPKUijoXWrWJoMavMjLMnCn0ATsuKhAlpcA')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
shiny::runApp('Desktop/code')
runApp('Desktop/code')
myData = c("y",rep(0,15),rep(1,35))
myData
myData = c(rep(0,15),rep(1,35))
response <- myData
nResponse <- length(response)
nResponse
#Data list for rjags
dataList = list(
response = response,
nResponse = nResponse
)
#Data list for rjags
dataList = list(
response = response,
nResponse = nResponse
)
parameters = c("theta")
parameters = c("theta")
adaptSteps    =  200      # Number of steps to "tune" the samplers.
burnInSteps   =  2000      # Number of steps to "burn-in" the samplers.
numSavedSteps = 1000      # Total number of steps to save collectively from all chains.
nChains   = 3               # Number of chains to run.
thinSteps = 1               # Number of steps to "thin" (1=keep every step).
nPerChain = ceiling( ( numSavedSteps * thinSteps ) / nChains ) # Steps per chain.
# Create, initialize, and adapt the model:
jagsModel = jags.model( "proportion_model.txt" , data=dataList ,  n.chains=nChains , n.adapt=adaptSteps )  #inits=initsList ,
cat( "Burning in the MCMC chain...\n" ) # Burn-in:
update( jagsModel , n.iter=burnInSteps )
cat( "Sampling final MCMC chain...\n" ) # The saved MCMC chain:
codaSamples = coda.samples( jagsModel , variable.names=parameters , n.iter=nPerChain , thin=thinSteps )
require(rjags)
source("DBDA2E-utilities.R")
setwd("~/GitHub/Shiny-Bayes")
require(rjags)
source("DBDA2E-utilities.R")
parameters = c("theta")
adaptSteps    =  200      # Number of steps to "tune" the samplers.
burnInSteps   =  2000      # Number of steps to "burn-in" the samplers.
numSavedSteps = 1000      # Total number of steps to save collectively from all chains.
nChains   = 3               # Number of chains to run.
thinSteps = 1               # Number of steps to "thin" (1=keep every step).
nPerChain = ceiling( ( numSavedSteps * thinSteps ) / nChains ) # Steps per chain.
# Create, initialize, and adapt the model:
jagsModel = jags.model( "proportion_model.txt" , data=dataList ,  n.chains=nChains , n.adapt=adaptSteps )  #inits=initsList ,
cat( "Burning in the MCMC chain...\n" ) # Burn-in:
update( jagsModel , n.iter=burnInSteps )
cat( "Sampling final MCMC chain...\n" ) # The saved MCMC chain:
codaSamples = coda.samples( jagsModel , variable.names=parameters , n.iter=nPerChain , thin=thinSteps )
nPerChain = ceiling( ( numSavedSteps * thinSteps ) / nChains ) # Steps per chain.
jagsModel = jags.model( "proportion_model.txt" , data=dataList ,  n.chains=nChains , n.adapt=adaptSteps )  #inits=initsList ,
source("DBDA2E-utilities.R")
jagsModel = jags.model( "proportion_model.txt" , data=dataList ,  n.chains=nChains , n.adapt=adaptSteps )  #inits=initsList ,
source("DBDA2E-utilities.R")
jagsModel = jags.model( "proportion_model.txt" , data=dataList ,  n.chains=nChains , n.adapt=adaptSteps )  #inits=initsList ,
install.packages('jags')
install.packages(runjags)
install.packages('runjags')
install.packages("runjags")
install.packages('rjags')
require(rjags)
source("DBDA2E-utilities.R")
# inFile <- input$file1
#
# if (is.null(inFile))
#   return(NULL)
#
# read.csv(inFile$datapath, header=input$header, sep=input$sep,
#          quote=input$quote)
# FORMAT DATA
myData = c(rep(0,15),rep(1,35))
response <- myData
nResponse <- length(response)
#Data list for rjags
dataList = list(
response = response,
nResponse = nResponse
)
#------------------------------------------------------------------------------
# RUN CHAINS
# initsList = list( theta=c(0.5,0.5,0.5) , m=3 ) #not necessary with simple models
parameters = c("theta")
adaptSteps    =  200      # Number of steps to "tune" the samplers.
burnInSteps   =  2000      # Number of steps to "burn-in" the samplers.
numSavedSteps = 1000      # Total number of steps to save collectively from all chains.
nChains   = 3               # Number of chains to run.
thinSteps = 1               # Number of steps to "thin" (1=keep every step).
nPerChain = ceiling( ( numSavedSteps * thinSteps ) / nChains ) # Steps per chain.
jagsModel = jags.model( "proportion_model.txt" , data=dataList ,  n.chains=nChains , n.adapt=adaptSteps )  #inits=initsList ,
install.packages('rjags')
require(rjags)
install.packages("rjags")
require(rjags)
source("DBDA2E-utilities.R")
# inFile <- input$file1
#
# if (is.null(inFile))
#   return(NULL)
#
# read.csv(inFile$datapath, header=input$header, sep=input$sep,
#          quote=input$quote)
# FORMAT DATA
myData = c(rep(0,15),rep(1,35))
response <- myData
nResponse <- length(response)
#Data list for rjags
dataList = list(
response = response,
nResponse = nResponse
)
